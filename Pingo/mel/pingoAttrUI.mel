global proc winProc()
{
    if (`window -ex "curveCtrl"`)
    deleteUI "curveCtrl";
    window -w 200 -h 500 -s 0 -mnb 1 -mxb 1 -t "Ctrl Ctr" curveCtrl;//, w=450, s=0, mnb=1, mxb=1
    columnLayout;
    gridLayout -numberOfColumns 10 -cellWidthHeight 30 25;
    //
    button -width 30 -l "X" -c "overrideColor(0)";
    canvas -bgc 0 0 0 -pc "overrideColor(1)";
    canvas -bgc 0.5 0.5 0.5 -pc "overrideColor(3)";
    canvas -bgc 0.75 0.75 0.75 -pc "overrideColor(2)";
    canvas -bgc 1 0 0 -pc "overrideColor(13)";
    canvas -bgc .8 0 0.2 -pc "overrideColor(4)";
    canvas -bgc 0.7 .2 0 -pc "overrideColor(12)";
    canvas -bgc 0.63 0.18 0.4 -pc "overrideColor(31)";
    canvas -bgc 1 1 0 -pc "overrideColor(17)";
    canvas -bgc 1 1 0.4 -pc "overrideColor(22)";//
    canvas -bgc 0.9 .7 .5 -pc "overrideColor(21)";
    canvas -bgc 1 .7 .7 -pc "overrideColor(20)";
    canvas -bgc 0 1 0 -pc "overrideColor(14)";
    canvas -bgc 0 0.7 .4 -pc "overrideColor(23)";
    canvas -bgc 0 .3 0 -pc "overrideColor(7)";
    canvas -bgc 0.2 0.63 0.35 -pc "overrideColor(27)";
    canvas -bgc 0 1 1 -pc "overrideColor(18)";
    canvas -bgc 0.4 0.6 0.2 -pc "overrideColor(26)";
    canvas -bgc .63 .63 .17 -pc "overrideColor(25)";
    canvas -bgc 0 0 1 -pc "overrideColor(6)";//
    canvas -bgc 0 0.3 0.6 -pc "overrideColor(15)";
    canvas -bgc 0.18 0.4 0.63 -pc "overrideColor(29)";
    canvas -bgc 0.18 0.63 0.63 -pc "overrideColor(28)";
    canvas -bgc .8 0 .8 -pc "overrideColor(9)";
    canvas -bgc 0.43 0.18 0.63 -pc "overrideColor(30)";
    canvas -bgc 1 1 1 -pc "overrideColor(16)";
    canvas -bgc .6 .4 .2 -pc "overrideColor(24)";
    canvas -bgc 0.6 0.3 0.2 -pc "overrideColor(10)";
    canvas -bgc 0.25 0.13 0.13 -pc "overrideColor(11)";
    button -l "OFF" -c "overrideDisabled()";
    setParent ..;
    
    rowColumnLayout -numberOfColumns 1;
    text -l "" -h 10 ;
    checkBoxGrp -numberOfCheckBoxes 3 -labelArray3 "X" "Y" "Z" -v1 true -v2 true -v3 true DR_GRP;
    setParent ..;
    
    rowColumnLayout -numberOfColumns 5;
    text -l "W" -h 25 -w 50 ;
    text -l "O" -h 25 -w 50 ;
    text -l "Value" -h 25 -w 100 ;
    text -l "W" -h 25 -w 50 ;
    text -l "O" -h 25 -w 50 ;
    setParent ..;
    
    rowColumnLayout -numberOfColumns 9;
    button -l "+" -w 25 -h 25 -c "moveCtrlA(11)";
    button -l "-" -w 25 -h 25 -c "moveCtrlA(12)";
    button -l "+" -w 25 -h 25 -c "moveCtrlA(13)";
    button -l "-" -w 25 -h 25 -c "moveCtrlA(14)";
    floatField -precision 3 -v 1 -w 100 -h 25 value_GRP_T;
    button -l "+" -w 25 -h 25 -c "moveCtrl(11)";
    button -l "-" -w 25 -h 25 -c "moveCtrl(12)";
    button -l "+" -w 25 -h 25 -c "moveCtrl(13)";
    button -l "-" -w 25 -h 25 -c "moveCtrl(14)";
    //
    button -l "+" -w 25 -h 25 -c "moveCtrlA(21)";
    button -l "-" -w 25 -h 25 -c "moveCtrlA(22)";
    button -l "+" -w 25 -h 25 -c "moveCtrlA(23)";
    button -l "-" -w 25 -h 25 -c "moveCtrlA(24)";
    floatField -precision 3 -v 45 -w 100 -h 25 value_GRP_R;
    button -l "+" -w 25 -h 25 -c "moveCtrl(21)";
    button -l "-" -w 25 -h 25 -c "moveCtrl(22)";
    button -l "+" -w 25 -h 25 -c "moveCtrl(23)";
    button -l "-" -w 25 -h 25 -c "moveCtrl(24)";
    setParent ..;
    
    rowColumnLayout -numberOfColumns 5;
    button -l "+" -w 25 -h 25 -c "moveCtrl(31)";
    button -l "-" -w 25 -h 25 -c "moveCtrl(32)";
    floatSliderGrp -min 1.01 -max 2 -field true -precision 2 -v 1.1 -fs 0.1 -w 200 value_GRP_S;
    button -l "+" -w 25 -h 25 -c "moveCtrl(33)";
    button -l "-" -w 25 -h 25 -c "moveCtrl(34)";
    setParent ..;
    
    rowColumnLayout -numberOfColumns 3;
    textField -w 150 -h 25 -changeCommand "setFocus mainTText" mainTText;
    button -l "Create Curve Text" -bgc 0.5 0.5 0 -h 25 -w 150 -command "textCreateProc2";
    setParent ..;
    
    rowColumnLayout -numberOfColumns 2;
        rowColumnLayout -numberOfColumns 1;
        
            rowColumnLayout -numberOfColumns 1;
            text -h 3 -label "";
            button -w 100 -bgc 0.5 0.5 0 -l "Replace" -command attrListProc;
            text -h 3 -label "";
            textScrollList -h 173 -w 100 -ams false -sc "attrListUpdateProc" "attrList";//
            //textScrollList -h 173 -w 120 -ams false -sc "attrList";//
            text -h 3 -label "";
            setParent ..;
            
            rowLayout -numberOfColumns 2 -columnWidth2 50 50 -columnAlign2 "center" "center";
            button -h 23 -w 50 -label "UP" -command attrUpProc;
            button -h 23 -w 50 -label "DOWN" -command attrDnProc;
            setParent ..;
        setParent ..;
        rowColumnLayout -numberOfColumns 1;
            rowColumnLayout -numberOfColumns 3;
            int $wA = 64;
            int $wC = 64;
            int $wB = 64;
            int $hA = 23;
            //text -w $wA -h $hA -l "Front";
            button -w $wB -h $hA -l "Front" -command "frontDuProc";
            text -w $wC -h $hA -l "ReName";
            //text -w $wB -h $hA -l "Back";
            button -w $wB -h $hA -l "Back" -command "backDuProc";
            textField -w $wA -h $hA -changeCommand "setFocus frontname" frontname;
            textField -w $wC -h $hA -changeCommand "setFocus middlename" middlename;
            textField -w $wB -h $hA -changeCommand "setFocus backname" backname;
            setParent..;
            
            rowColumnLayout -numberOfColumns 7;
            button -w 24 -h $hA -bgc 0.5 0 0 -l "X" -command "frontCproc";
            button -w 30 -h $hA -bgc 0.5 0 0 -l "Add" -command "frontProc";
            button -w 30 -h $hA -l "123" -command "renameAproc";
            button -w 24 -h $hA -l "X" -command "renameCproc";
            button -w 30 -h $hA -l "ABC" -command "renameBproc";
            button -w 30 -h $hA -bgc 0 0 0.5 -l "Add" -command "backProc";
            button -w 24 -h $hA -bgc 0 0 0.5 -l "X" -command "backCproc";
            setParent..;
            
            rowColumnLayout -numberOfColumns 3;
            text -w $wA -h $hA -l "Search";
            button -w $wC -h $hA -bgc 1 1 1 -label "Shape" -command "shapeProcA";
            text -w $wB -h $hA -l "Change";
            textField -w $wA -h $hA -changeCommand "setFocus searchname" searchname;
            button -w $wC -h $hA -label "Add" -command "scProc";
            textField -w $wB -h $hA -changeCommand "setFocus changename" changename;
            setParent..;
            
            rowColumnLayout -numberOfColumns 4;
            button -w 40 -h $hA -l "print" -command "printProc";
            textField -w 90 -h $hA -changeCommand "setFocus searchObj" searchObj;
            button -w 40 -h $hA -l "select" -command "selectProc";
            button -w 22 -h $hA -l "S" -command "shapeProc";
            setParent..;
            
            string $Rig = `rowColumnLayout -numberOfRows 4
            -rowHeight 1 23 -rowHeight 2 23 -rowHeight 3 23 -rowHeight 4 23 Rig`;
            text -w 40 -label "Name";//1
            text -l "Min";
            text -l "Max";
            text -l "(a:b:c:)";
            textField -w 100 -changeCommand "setFocus undo_name" undo_name;//2
            floatField -w 100 -changeCommand "setFocus undo_min" -precision 2 undo_min;
            floatField -w 100 -changeCommand "setFocus undo_max" -precision 2 -value 1 undo_max;
            textField -w 100 -changeCommand "setFocus undo_nameENlist" undo_nameENlist;
            button -l "MinMax" -command "comA01_2Procedure";
            button -w 40 -label "Infinity" -command "comA01_1Procedure";
            button -l "on/off" -command "comA02Procedure";
            button -l "enum" -command "comA03Procedure";
            setParent ..;
        setParent ..;
    setParent ..;
    
    rowColumnLayout -numberOfColumns 8;
    button -w 50 -h 23 -l "Lock" -command "comA05proc(1)";
    button -w 25 -h 23 -l "v" -command "comA05proc(31)";
    button -w 50 -h 23 -l "Hide" -command "comA05proc(3)";
    button -w 25 -h 23 -l "v" -command "comA05proc(33)";
    button -w 50 -h 23 -l "unLock" -command "comA05proc(2)";
    button -w 25 -h 23 -l "v" -command "comA05proc(32)";
    button -w 50 -h 23 -l "unHide" -command "comA05proc(4)";
    button -w 25 -h 23 -l "v" -command "comA05proc(34)";
    setParent ..;
    
    rowColumnLayout -numberOfColumns 12;
    button -w 25 -l "T" -command "comA05proc(11)";
    button -w 25 -l "R" -command "comA05proc(12)";
    button -w 25 -l "S" -command "comA05proc(13)";
    button -w 25 -l "T" -command "comA05proc(21)";
    button -w 25 -l "R" -command "comA05proc(22)";
    button -w 25 -l "S" -command "comA05proc(23)";
    button -w 25 -l "T" -command "comA05proc(14)";
    button -w 25 -l "R" -command "comA05proc(15)";
    button -w 25 -l "S" -command "comA05proc(16)";
    button -w 25 -l "T" -command "comA05proc(24)";
    button -w 25 -l "R" -command "comA05proc(25)";
    button -w 25 -l "S" -command "comA05proc(26)";
    setParent ..;
    
    showWindow curveCtrl;
}
global proc overrideDisabled()
{
    string $selected[]=`ls -sl`;
    for ($n=0; $n<size($selected); $n++)
    {
        string $selShape[] = `listRelatives -s $selected`;
        for ($m=0; $m<size($selShape); $m++)
        {setAttr ($selShape[$m] + ".overrideEnabled") 0; }
    }
}
global proc overrideColor(int $Index)
{
    string $selected[]=`ls -sl`;
    for ($n=0; $n<size($selected); $n++)
    {
        string $selShape[] = `listRelatives -s $selected`;
        for ($m=0; $m<size($selShape); $m++)
        { setAttr ($selShape[$m] + ".overrideEnabled") 1; }
        for ($m=0; $m<size($selShape); $m++)
        { setAttr ($selShape[$m] + ".overrideColor") $Index; }
    }
}
global proc moveCtrl(int $Index)
{
    int $DR_GRP_Value1 = 0;
    int $DR_GRP_Value2 = 0;
    int $DR_GRP_Value3 = 0;
    if(`checkBoxGrp -q -value1 DR_GRP`) $DR_GRP_Value1 = 1;
    if(`checkBoxGrp -q -value2 DR_GRP`) $DR_GRP_Value2 = 1;
    if(`checkBoxGrp -q -value3 DR_GRP`) $DR_GRP_Value3 = 1;
    
    $value_GRP_T = `floatField -q -value value_GRP_T`;
    $value_GRP_R = `floatField -q -value value_GRP_R`;
    $value_GRP_S = `floatSliderGrp -q -value value_GRP_S`;
    
    int $outValue = $Index;
    
    float $value_X = $DR_GRP_Value1*$value_GRP_T;
    float $value_Y = $DR_GRP_Value2*$value_GRP_T;
    float $value_Z = $DR_GRP_Value3*$value_GRP_T;
    
    float $value_XX = $DR_GRP_Value1*$value_GRP_R;
    float $value_YY = $DR_GRP_Value2*$value_GRP_R;
    float $value_ZZ = $DR_GRP_Value3*$value_GRP_R;
    
    float $value_XXX = 1;
    float $value_YYY = 1;
    float $value_ZZZ = 1;
    if ($DR_GRP_Value1 == 1) $value_XXX = $DR_GRP_Value1*$value_GRP_S;
    else $value_XXX = 1;
    if ($DR_GRP_Value2 == 1) $value_YYY = $DR_GRP_Value2*$value_GRP_S;
    else $value_YYY = 1;
    if ($DR_GRP_Value3 == 1) $value_ZZZ = $DR_GRP_Value3*$value_GRP_S;
    else $value_ZZZ = 1;
    
    {
        string $sel[] = `ls -sl`;
        for ($i =0; $i<size($sel); $i++)
        {
            float $pos[] = `xform -q -ws -t $sel[$i]`;
            string $selS[] = `listRelatives -s $sel[$i]`;
            for ($j=0; $j<size($selS); $j++)
            {
                string $a = `match "Orig" $selS[$j]`;
                if(size($a)==0)
                {
                    int $s = `getAttr ($selS[$j] + ".spans")`;
                    int $f = `getAttr ($selS[$j] + ".form")`;
                    int $d = `getAttr ($selS[$j] + ".degree")`;
                    int $SV = 0;
                    int $EV = 0;
                    if($d==1)
                    {
                        if($f==0)
                        {
                            $EV += $s;
                        }
                        else
                        {
                            $EV += $s-1;
                        }
                    }
                    if($d==2)
                    {
                        if($f==0)
                        {
                            $EV += $s+1;
                        }
                        else
                        {
                            $EV += $s-1;
                        }
                    }
                    if($d==3)
                    {
                        if($f==0)
                        {
                            $EV += $s+2;
                        }
                        else
                        {
                            $EV += $s-1;
                        }
                    }
                    //print ($s + "    " + $f + "    " + $d + "\n");
                    //print ($selS[$j] + "    " + $SV + "    " + $EV + "\n");
                    //select -r ($selS[$j] + ".cv[" + $SV + ":" + $EV + "]") ;
                    
                    
                    
                    string $MS = ($selS[$j] + ".cv[" + $SV + ":" + $EV + "]") ;
                    
                    switch($outValue)
                    {
                        case 13: move -r -os -wd $value_X $value_Y $value_Z $MS; break;
                        case 14: move -r -os -wd ($value_X*-1) ($value_Y*-1) ($value_Z*-1) $MS; break;
                        case 11: move -r $value_X $value_Y $value_Z $MS; break;
                        case 12: move -r ($value_X*-1) ($value_Y*-1) ($value_Z*-1) $MS; break;
                        //
                        case 23: rotate -r -p ($pos[0] + "cm") ($pos[1] + "cm") ($pos[2] + "cm") -os $value_XX $value_YY $value_ZZ $MS; break;
                        case 24: rotate -r -p ($pos[0] + "cm") ($pos[1] + "cm") ($pos[2] + "cm") -os ($value_XX*-1) ($value_YY*-1) ($value_ZZ*-1) $MS; break;
                        //case 24: rotate -r -p ($pos[0] + "cm") ($pos[1] + "cm") ($pos[2] + "cm") -os $value_XX $value_YY $value_ZZ ; break;
                        case 21: rotate -r -p 0cm 0cm 0cm -os $value_XX $value_YY $value_ZZ $MS; break;
                        case 22: rotate -r -p 0cm 0cm 0cm -os ($value_XX*-1) ($value_YY*-1) ($value_ZZ*-1) $MS; break;
                        //
                        case 33: scale -r -p ($pos[0] + "cm") ($pos[1] + "cm") ($pos[2] + "cm") $value_XXX $value_YYY $value_ZZZ $MS; break;
                        case 34: scale -r -p ($pos[0] + "cm") ($pos[1] + "cm") ($pos[2] + "cm") (2-$value_XXX) (2-$value_YYY) (2-$value_ZZZ) $MS; break;
                        case 31: scale -r -p 0cm 0cm 0cm $value_XXX $value_YYY $value_ZZZ $MS; break;
                        case 32: scale -r -p 0cm 0cm 0cm (2-$value_XXX) (2-$value_YYY) (2-$value_ZZZ) $MS; break;
                    }
                }
            }
        }
    }
}

global proc moveCtrlA(int $Index)
{
    int $DR_GRP_Value1 = 0;
    int $DR_GRP_Value2 = 0;
    int $DR_GRP_Value3 = 0;
    if(`checkBoxGrp -q -value1 DR_GRP`) $DR_GRP_Value1 = 1;
    if(`checkBoxGrp -q -value2 DR_GRP`) $DR_GRP_Value2 = 1;
    if(`checkBoxGrp -q -value3 DR_GRP`) $DR_GRP_Value3 = 1;
    
    $value_GRP_T = `floatField -q -value value_GRP_T`;
    $value_GRP_R = `floatField -q -value value_GRP_R`;
    $value_GRP_S = `floatSliderGrp -q -value value_GRP_S`;
    
    int $outValue = $Index;
    
    float $value_X = $DR_GRP_Value1*$value_GRP_T;
    float $value_Y = $DR_GRP_Value2*$value_GRP_T;
    float $value_Z = $DR_GRP_Value3*$value_GRP_T;
    
    float $value_XX = $DR_GRP_Value1*$value_GRP_R;
    float $value_YY = $DR_GRP_Value2*$value_GRP_R;
    float $value_ZZ = $DR_GRP_Value3*$value_GRP_R;
    
    float $value_XXX = 1;
    float $value_YYY = 1;
    float $value_ZZZ = 1;
    if ($DR_GRP_Value1 == 1) $value_XXX = $DR_GRP_Value1*$value_GRP_S;
    else $value_XXX = 1;
    if ($DR_GRP_Value2 == 1) $value_YYY = $DR_GRP_Value2*$value_GRP_S;
    else $value_YYY = 1;
    if ($DR_GRP_Value3 == 1) $value_ZZZ = $DR_GRP_Value3*$value_GRP_S;
    else $value_ZZZ = 1;
    
    {
        string $selList[] = `ls -sl`;
        for ($i =0; $i<size($selList); $i++)
        {
            //select $selList[$i];
            switch($outValue)
            { 
                case 13: move -r -os -wd $value_X $value_Y $value_Z $selList[$i]; break;
                case 14: move -r -os -wd ($value_X*-1) ($value_Y*-1) ($value_Z*-1) $selList[$i]; break;
                case 11: move -r $value_X $value_Y $value_Z $selList[$i]; break;
                case 12: move -r ($value_X*-1) ($value_Y*-1) ($value_Z*-1) $selList[$i]; break;
                //
                /*
                case 23: rotate -r -ocp -os $value_XX $value_YY $value_ZZ $selList[$i]; break;
                case 24: rotate -r -ocp -os ($value_XX*-1) ($value_YY*-1) ($value_ZZ*-1) $selList[$i]; break;
                case 21: rotate -r -p 0cm 0cm 0cm -os $value_XX $value_YY $value_ZZ $selList[$i]; break;
                case 22: rotate -r -p 0cm 0cm 0cm -os ($value_XX*-1) ($value_YY*-1) ($value_ZZ*-1) $selList[$i]; break;
                */
                case 23: rotate -r -os $value_XX $value_YY $value_ZZ $selList[$i]; break;
                case 24: rotate -r -os ($value_XX*-1) ($value_YY*-1) ($value_ZZ*-1) $selList[$i]; break;
                case 21: rotate -r -ws $value_XX $value_YY $value_ZZ $selList[$i]; break;
                case 22: rotate -r -ws ($value_XX*-1) ($value_YY*-1) ($value_ZZ*-1) $selList[$i]; break;
                //
                case 33: scale -r -ocp ($value_XXX*-1) ($value_YYY*-1) ($value_ZZZ*-1) $selList[$i]; break;
                case 34: scale -r -ocp ($value_XXX*-1) ($value_YYY*-1) ($value_ZZZ*-1) $selList[$i]; break;
                case 31: scale -r -p 0cm 0cm 0cm $value_XXX $value_YYY $value_ZZZ $selList[$i]; break;
                case 32: scale -r -p 0cm 0cm 0cm ($value_XXX*-1) ($value_YYY*-1) ($value_ZZZ*-1) $selList[$i]; break;
            }
            //select $selList ;
        }
    }
}


global proc textCreateProc2()
{
    $mainTText = `textField -q -text mainTText`;
    string $textArray = $mainTText;
    string $selName[];
    $selNameSpace = `tokenize $textArray ":" $selName`;
    
    for ($iii =0; $iii<size($selName); $iii++)
    {
        string $mainText = $selName[$iii];
        // create text 
        textCurves -ch 0 -f "Utopia-Bold" -t $mainText;
        string $selOne[]=`ls -sl`;
        select -hierarchy $selOne;
        string $selGeometryShape[]=`ls -type geometryShape -sl`;
        string $selParent[] = `listRelatives -p $selGeometryShape`;
        string $forSel[] =  `filterExpand -sm 9 $selParent`; print $forSel;
        int $ii = size($forSel)-1;
        for ($i =0; $i<$ii; $i++)
        {
            select -r $forSel[$i] $forSel[$ii];
            string $sel[] = `ls -sl`;
            string $shape[] = `listRelatives -s $sel`;
            int $selSize = size($sel) -1;
            select -d $sel[$selSize] ;
            string $selAdd[] = `ls -sl`;
            
            {
                CreateLocator;
                string $y[] = `ls -sl`;
                delete `parentConstraint -weight 1 $sel[$selSize] $y[0]`;
                string $locator_snap[] = `ls -sl`;
                rename $locator_snap[0] addShape_locator;
            }
            parent $selAdd $sel[$selSize];
            setAttr ($sel[$selSize] + ".translateX") 0;
            setAttr ($sel[$selSize] + ".translateY") 0;
            setAttr ($sel[$selSize] + ".translateZ") 0;
            setAttr ($sel[$selSize] + ".rotateX") 0;
            setAttr ($sel[$selSize] + ".rotateY") 0;
            setAttr ($sel[$selSize] + ".rotateZ") 0;
            {
                makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 $selAdd;
            }
            for ($k =0; $k<$selSize; $k++)
            {
                parent -add -s $shape[$k] $sel[$selSize];
            }
            delete `parentConstraint -weight 1 addShape_locator $sel[$selSize]`;
            string $deleteSel[] = `listRelatives -c $sel[$selSize]`;
            parent -w $selAdd;
            delete addShape_locator;
        }
        for ($i =0; $i<$ii; $i++)
        {
            delete $forSel[$i];
        }
        parent -w $forSel[$ii];
        //delete ("Text_" + $mainText + "_1");
        delete $selOne[0];
        CenterPivot;
        string $selTextCurve[] = `ls -sl`;
        string $loc[]=`spaceLocator -p 0 0 0`;
        delete `parentConstraint -weight 1 $selTextCurve[0] $loc[0]`;
        parent  $selTextCurve[0] $loc[0];
        setAttr ($loc[0] + ".translateX") 0;
        setAttr ($loc[0] + ".translateY") 0;
        setAttr ($loc[0] + ".translateZ") 0;
        //rotate -r -os -fo -90 0 0 ;
        rotate -r -os -90 0 0 ;
        parent -w $forSel[$ii];
        delete $loc[0];
        FreezeTransformations;
        group -n ("text_" + $mainText + "_GRP") $forSel[$ii];
        {
            rename $forSel[$ii] ("text_" + $mainText + "_Curve") ;
            string $sel = "text_" + $mainText + "_Curve";
            string $textShape[] = `listRelatives -s $sel`;
            for ($p =0; $p<size($textShape); $p++)
            {
                rename $textShape[$p] ($sel + $p + "Shape");
            }
        }
        //setAttr ("text_" + $mainText + "_GRP.template") 1;
        select -cl  ;
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////                                                                                       //////////
//////////                                                                                       //////////
//////////                                     add attribute                                     //////////
//////////                                                                                       //////////
//////////                                                                                       //////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
global proc comA01_2Procedure()
{
    $undo_name = `textField -q -text undo_name`;
    $undo_min = `floatField -q -value undo_min`;
    $undo_max = `floatField -q -value undo_max`;
    string $selattr[] = `ls -sl`;
    
    string $nameList = $undo_name;
    string $tokenA[];
    $tokenAsize = `tokenize $nameList ":" $tokenA`;
    
    for ($ii =0; $ii<size($tokenA); $ii++)
    {
        for ($i =0; $i<size($selattr); $i++)
        {
            select $selattr[$i];
            addAttr -at double -keyable true -longName $tokenA[$ii]
            -hasMaxValue 1 -minValue $undo_min
            -hasMinValue 1 -maxValue $undo_max;
        }
    }
    select -r $selattr;
}
global proc comA01_1Procedure()
{
    $undo_name = `textField -q -text undo_name`;
    $undo_min = `floatField -q -value undo_min`;
    $undo_max = `floatField -q -value undo_max`;
    string $selattr[] = `ls -sl`;
    
    string $nameList = $undo_name;
    string $tokenA[];
    $tokenAsize = `tokenize $nameList ":" $tokenA`;
    
    for ($ii =0; $ii<size($tokenA); $ii++)
    {
        for ($i =0; $i<size($selattr); $i++)
        {
            select $selattr[$i];
            addAttr -at double -keyable true -longName $tokenA[$ii];
        }
    }
    select -r $selattr;
}
global proc comA02Procedure()
{
    $undo_name = `textField -q -text undo_name`;
    string $selattr[] = `ls -sl`; 
    
    string $nameList = $undo_name;
    string $tokenA[];
    $tokenAsize = `tokenize $nameList ":" $tokenA`;
    
    for ($ii =0; $ii<size($tokenA); $ii++)
    {
        for ($i =0; $i<size($selattr); $i++)
        {
            select $selattr[$i];
            {addAttr -at bool -keyable true -longName $tokenA[$ii];}
        }
    }
    select $selattr;
}

global proc comA03Procedure()
{
    $undo_name = `textField -q -text undo_name`;
    $undo_nameENlist = `textField -q -text undo_nameENlist`;
    string $selattr[] = `ls -sl`; 
    
    string $nameList = $undo_name;
    string $tokenA[];
    $tokenAsize = `tokenize $nameList ":" $tokenA`;
    
    for ($ii =0; $ii<size($tokenA); $ii++)
    {
        for ($i =0; $i<size($selattr); $i++)
        {
            select $selattr[$i];
            {addAttr -at "enum" -en ($undo_nameENlist) -keyable true -longName $tokenA[$ii];}
        }
    }
    select $selattr;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////                                                                                       //////////
//////////                                                                                       //////////
//////////                                  attribute reorder                                    //////////
//////////                                                                                       //////////
//////////                                                                                       //////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
global proc attrListUpdateProc ()
{
    string $selNodeText[] = `textScrollList -query -selectItem "attrList"`;
    //textField -edit -text $selNodeText[0] "nodeTextField";
}
global proc attrListProc ()
{
    string $sel[] = `ls -sl`;
    string $attrL[] = `listAttr -ud $sel[0]`;
    string $selAL[] = `channelBox -q -sma mainChannelBox`;
    textScrollList -e -ra "attrList";
    for($i=0; $i<size($attrL); $i++)
    {
        textScrollList -edit -append $attrL[$i] "attrList";
    }
}
global proc attrUpProc()
{
    string $textDp[] = `textScrollList -query -selectItem "attrList"`;
    string $sel[] = `ls -sl`;
    string $attrL[] = `listAttr -ud $sel[0]`;
    //string $selAL[] = `channelBox -q -sma mainChannelBox`;
    string $selAL[] = { $textDp[0] };
    for($i=0; $i<size($attrL); $i++)
    {
        int $ii = $i-1;
        if($attrL[$i]==$selAL[0])
        {
            if($i==0)
            {
                print ("\n----- " + $sel[0] + "." + $attrL[$i] + "----- is TOP ATTRIBUTE\n");
            }
            else
            {
                int $attrLock = `getAttr -lock ($sel[0] + "." + $attrL[$ii])`;
                if($attrLock==1)
                {
                    CBunlockAttr ($sel[0] + "." + $attrL[$ii]);
                    {
                        deleteAttr -attribute $attrL[$ii] $sel[0];
                        Undo;
                    }
                    {
                        for($j=$i+1; $j<size($attrL); $j++)
                        {
                            int $attrLockHi = `getAttr -lock ($sel[0] + "." + $attrL[$j])`;
                            print ($sel[0] + "." + $attrL[$j]);
                            if($attrLockHi==1)
                            {
                                CBunlockAttr ($sel[0] + "." + $attrL[$j]);
                                {
                                    deleteAttr -attribute $attrL[$j] $sel[0];
                                    Undo;
                                }
                                setAttr -lock true ($sel[0] + "." + $attrL[$j]);
                            }
                            else
                            {
                                deleteAttr -attribute $attrL[$j] $sel[0];
                                Undo;
                            }
                        }
                    }
                    setAttr -lock true ($sel[0] + "." + $attrL[$ii]);
                }
                else
                {
                    {
                        deleteAttr -attribute $attrL[$ii] $sel[0];
                        Undo;
                    }
                    {
                        for($j=$i+1; $j<size($attrL); $j++)
                        {
                            int $attrLockHi = `getAttr -lock ($sel[0] + "." + $attrL[$j])`;
                            print ($sel[0] + "." + $attrL[$j]);
                            if($attrLockHi==1)
                            {
                                CBunlockAttr ($sel[0] + "." + $attrL[$j]);
                                {
                                    deleteAttr -attribute $attrL[$j] $sel[0];
                                    Undo;
                                }
                                setAttr -lock true ($sel[0] + "." + $attrL[$j]);
                            }
                            else
                            {
                                deleteAttr -attribute $attrL[$j] $sel[0];
                                Undo;
                            }
                        }
                    }
                }
            }
        }
        else
        { print ""; }
    }
    //attrListProc;
    {
        string $sel[] = `ls -sl`;
        string $attrL[] = `listAttr -ud $sel[0]`;
        textScrollList -e -ra "attrList";
        for($i=0; $i<size($attrL); $i++)
        {
            textScrollList -edit -append $attrL[$i] "attrList";
        }
        {
            textScrollList -edit -selectItem $selAL[0] "attrList";
        }
    }
}
global proc attrDnProc()
{
    string $textDp[] = `textScrollList -query -selectItem "attrList"`;
    string $sel[] = `ls -sl`;
    string $attrL[] = `listAttr -ud $sel[0]`;
    //string $selAL[] = `channelBox -q -sma mainChannelBox`;
    string $selAL[] = { $textDp[0] };
    for($i=0; $i<size($attrL); $i++)
    {
        int $ii = $i-1;
        if($attrL[$i]==$selAL[0])
        {
            int $attrLock = `getAttr -lock ($sel[0] + "." + $attrL[$i])`;
            if($attrLock==1)
            {
                CBunlockAttr ($sel[0] + "." + $attrL[$i]);
                {
                    deleteAttr -attribute $attrL[$i] $sel[0];
                    Undo;
                }
                {
                    for($j=$i+2; $j<size($attrL); $j++)
                    {
                        int $attrLockHi = `getAttr -lock ($sel[0] + "." + $attrL[$j])`;
                        print ($sel[0] + "." + $attrL[$j]);
                        if($attrLockHi==1)
                        {
                            CBunlockAttr ($sel[0] + "." + $attrL[$j]);
                            {
                                deleteAttr -attribute $attrL[$j] $sel[0];
                                Undo;
                            }
                            setAttr -lock true ($sel[0] + "." + $attrL[$j]);
                        }
                        else
                        {
                            deleteAttr -attribute $attrL[$j] $sel[0];
                            Undo;
                        }
                    }
                }
                setAttr -lock true ($sel[0] + "." + $attrL[$i]);
            }
            else
            {
                {
                    deleteAttr -attribute $attrL[$i] $sel[0];
                    Undo;
                }
                {
                    for($j=$i+2; $j<size($attrL); $j++)
                    {
                        int $attrLockHi = `getAttr -lock ($sel[0] + "." + $attrL[$j])`;
                        print ($sel[0] + "." + $attrL[$j]);
                        if($attrLockHi==1)
                        {
                            CBunlockAttr ($sel[0] + "." + $attrL[$j]);
                            {
                                deleteAttr -attribute $attrL[$j] $sel[0];
                                Undo;
                            }
                            setAttr -lock true ($sel[0] + "." + $attrL[$j]);
                        }
                        else
                        {
                            deleteAttr -attribute $attrL[$j] $sel[0];
                            Undo;
                        }
                    }
                }
            }
        }
        else
        { print ""; }
    }
    //attrListProc;
    {
        string $sel[] = `ls -sl`;
        string $attrL[] = `listAttr -ud $sel[0]`;
        textScrollList -e -ra "attrList";
        for($i=0; $i<size($attrL); $i++)
        {
            textScrollList -edit -append $attrL[$i] "attrList";
        }
        {
            textScrollList -edit -selectItem $selAL[0] "attrList";
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////                                                                                       //////////
//////////                                                                                       //////////
//////////                                         rename                                        //////////
//////////                                                                                       //////////
//////////                                                                                       //////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

global proc shapeProcA()
{
    string $selA[] = `ls -sl`;
    select -hi $selA[0];
    string $allA[] = `ls -sl`;
    for ($i =0; $i<size($allA); $i++)
    {
        string $selS[] = `listRelatives -s $allA[$i]`;
        if(size($selS)==0)
        select -d $allA[$i];
    }
    {DeleteHistory;}
    string $SM[] = {};
    string $MS[] = {};
    string $all[] = `ls -sl`;
    for ($i =0; $i<size($all); $i++)
    {
        int $ii = $i+1;
        if (`match "|" $all[$i]` != "")
        {
            string $allS = `objectType $all[$i]`;
            if($allS=="transform")
            {
                string $tokenA[];
                string $a = "|";
                $tokenB = `tokenize $all[$i] $a $tokenA`;
                string $newSet = `sets -n ("renameBeforeSET_" + $i) $all[$i]`;
                stringArrayInsertAtIndex($i, $SM, $newSet);
                stringArrayInsertAtIndex($i, $MS, $tokenA[size($tokenA)-1]);
            }
        }
    }
    for ($i =0; $i<size($SM); $i++)
    {
        select -r $SM[$i];
        string $sel[] = `ls -sl`;
        rename $sel[0] ($MS[$i] + "_re" + $i);
    }
    delete $SM;
    shapeReProc;
}


global proc frontProc()
{
    string $rename[] = `ls -sl`;
    int $renameSize = size($rename);
    for ($i =0; $i<$renameSize; $i++)
    {
        $frontname = `textField -q -text frontname`;
        rename $rename[$i] ($frontname + $rename[$i]);
    }
}
global proc frontDuProc()
{
    $frontname = `textField -q -text frontname`;
    string $EE = $frontname;
    string $sel[] = `ls -sl`;
    select -hi $sel[0];
    string $selA[] = `ls -sl`;
    duplicate $sel[0];
    string $selsel[] = `ls -sl`;
    select -hi $selsel[0];
    string $selB[] = `ls -sl`;
    for ($i =0; $i<size($selA); $i++)
    {
        int $ii = size($selA)-$i-1;
        string $tokenA[];
        $tokenAA = `tokenize $selA[$ii] "|" $tokenA`;
        string $tokenB[];
        $tokenBB = `tokenize $selB[$ii] "|" $tokenB`;
        rename $selB[$ii] ($frontname + $tokenA[size($tokenA)-1]);
    }
}
global proc frontCproc()
{
    $frontname = `textField -q -text frontname`;
    string $sel[] = `ls -sl`;
    for ($i =0; $i<size($sel); $i++)
    {
        int $ii = $i+1;
        select -r $sel[$i];
        sets -name ("rename" + $ii + "_set");
    }
    for ($i =0; $i<size($sel); $i++)
    {
        int $ii = $i+1;
        select ("rename" + $ii + "_set");
        string $selSet[] = `ls -sl`;
        string $tokenA[];
        $tokenB = `tokenize $sel[$i] "|" $tokenA`;
        rename $selSet[0] ($frontname + $tokenA[size($tokenA)-1]);
        delete ("rename" + $ii + "_set");
    }
}
global proc renameAproc()
{
    $middlename = `textField -q -text middlename`;
    string $sel[] = `ls -sl`;
    for ($i =0; $i<size($sel); $i++)
    {
        int $ii = $i+1;
        rename $sel[$i] ($middlename + $ii);
    }
}
global proc renameBproc()
{
    $middlename = `textField -q -text middlename`;
    string $sel[] = `ls -sl`;
    string $ABC[] = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};
    if(size($sel)>26)
    {
        print "Check the selected number.";
    }
    else
    {
        for ($i =0; $i<size($sel); $i++)
        {
            int $ii = $i+1;
            rename $sel[$i] ($middlename + $ABC[$i]);
        }
    }
}
global proc renameCproc()
{
    $middlename = `textField -q -text middlename`;
    string $sel[] = `ls -sl`;
    for ($i =0; $i<size($sel); $i++)
    {
        int $ii = $i+1;
        select -r $sel[$i];
        sets -name ("rename" + $ii + "_set");
    }
    for ($i =0; $i<size($sel); $i++)
    {
        int $ii = $i+1;
        select ("rename" + $ii + "_set");
        string $selSet[] = `ls -sl`;
        rename $selSet[0] ($middlename + $ii);
        delete ("rename" + $ii + "_set");
    }
}
global proc backProc()
{
    $backname = `textField -q -text backname`;
    string $rename[] = `ls -sl`;
    int $renameSize = size($rename);
    for ($i =0; $i<$renameSize; $i++)
    {
        rename $rename[$i] ($rename[$i] + $backname);
    }
}
global proc backDuProc()
{
    $backname = `textField -q -text backname`;
    string $EE = $backname;
    string $sel[] = `ls -sl`;
    select -hi $sel[0];
    string $selA[] = `ls -sl`;
    duplicate $sel[0];
    string $selsel[] = `ls -sl`;
    select -hi $selsel[0];
    string $selB[] = `ls -sl`;
    for ($i =0; $i<size($selA); $i++)
    {
        int $ii = size($selA)-$i-1;
        string $tokenA[];
        $tokenAA = `tokenize $selA[$ii] "|" $tokenA`;
        string $tokenB[];
        $tokenBB = `tokenize $selB[$ii] "|" $tokenB`;
        rename $selB[$ii] ($tokenA[size($tokenA)-1] + $backname);
    }
}
global proc backCproc()
{
    $backname = `textField -q -text backname`;
    string $sel[] = `ls -sl`;
    for ($i =0; $i<size($sel); $i++)
    {
        int $ii = $i+1;
        select -r $sel[$i];
        sets -name ("rename" + $ii + "_set");
    }
    for ($i =0; $i<size($sel); $i++)
    {
        int $ii = $i+1;
        select ("rename" + $ii + "_set");
        string $selSet[] = `ls -sl`;
        string $tokenA[];
        $tokenB = `tokenize $sel[$i] "|" $tokenA`;
        rename $selSet[0] ($tokenA[size($tokenA)-1] + $backname);
        delete ("rename" + $ii + "_set");
    }
}
global proc shapeReProc()
{
    shapeReRun();
    shapeReRun();
}
global proc shapeReRun()
{
    string $sel[]=`ls -sl`;
    for ($i=0; $i<size($sel); $i++)
    {
        string $selS[] = `listRelatives -s $sel[$i]`;
        
        if(size($selS)>1)
        {
            for ($j=0; $j<size($selS); $j++)
            {
                string $a = `match "Orig" $selS[$j]`;
                if(size($a)==0)
                {
                    rename $selS[$j] ($sel[$i] + $j + "Shape");
                }
                else
                {
                    rename $selS[$j] ($sel[$i] + $j + "ShapeOrig");
                }
            }
        }
        else
        {
            rename $selS[0] ($sel[$i] + "Shape");
        }
    }
}
global proc scProc()
{
    string $rename[] = `ls -sl`;
    int $renameSize = size($rename);
    for ($i =0; $i<$renameSize; $i++)
    {
        $searchname = `textField -q -text searchname`;
        $changename = `textField -q -text changename`;
        string $a = $searchname; string $b = $changename;
        string $ChaName = `substitute $a $rename[$i] $b`;
        rename $rename[$i] $ChaName;
    }
}
global proc printProc()
{
    $searchObj = `textField -q -text searchObj`;
    string $sel[] = `ls $searchObj`;
    print $sel;
}
global proc selectProc()
{
    $searchObj = `textField -q -text searchObj`;
    string $sel[] = `ls $searchObj`;
    for ($i =0; $i<size($sel); $i++)
    {
        select -add $sel[$i];
    }
}
global proc shapeProc()
{
    string $sel[] = `ls -sl "*Shape*"`;
    for ($i =0; $i<size($sel); $i++)
    {
        select -d $sel[$i];
    }
}
global proc comA05proc( int $xxyyzz)
{
    string $sel[] = `ls -sl`;
    string $tList[] = {"translateX","translateY","translateZ"};
    string $rList[] = {"rotateX","rotateY","rotateZ"};
    string $sList[] = {"scaleX","scaleY","scaleZ"};
    for ($i =0; $i<size($sel); $i++)
    {
        if($xxyyzz==1)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            {
                setAttr -lock 1 ($sel[$i] + "." + $tList[$ii]);
                setAttr -lock 1 ($sel[$i] + "." + $rList[$ii]);
                setAttr -lock 1 ($sel[$i] + "." + $sList[$ii]);
            }
        }
        else if($xxyyzz==2)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            {
                setAttr -lock 0 ($sel[$i] + "." + $tList[$ii]);
                setAttr -lock 0 ($sel[$i] + "." + $rList[$ii]);
                setAttr -lock 0 ($sel[$i] + "." + $sList[$ii]);
            }
        }
        else if($xxyyzz==3)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            {
                setAttr -keyable 0 ($sel[$i] + "." + $tList[$ii]);
                setAttr -keyable 0 ($sel[$i] + "." + $rList[$ii]);
                setAttr -keyable 0 ($sel[$i] + "." + $sList[$ii]);
            }
        }
        else if($xxyyzz==4)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            {
                setAttr -keyable 1 ($sel[$i] + "." + $tList[$ii]);
                setAttr -keyable 1 ($sel[$i] + "." + $rList[$ii]);
                setAttr -keyable 1 ($sel[$i] + "." + $sList[$ii]);
            }
        }
        else if($xxyyzz==11)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -lock 1 ($sel[$i] + "." + $tList[$ii]); }
        }
        else if($xxyyzz==12)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -lock 1 ($sel[$i] + "." + $rList[$ii]); }
        }
        else if($xxyyzz==13)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -lock 1 ($sel[$i] + "." + $sList[$ii]); }
        }
        else if($xxyyzz==14)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -lock 0 ($sel[$i] + "." + $tList[$ii]); }
        }
        else if($xxyyzz==15)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -lock 0 ($sel[$i] + "." + $rList[$ii]); }
        }
        else if($xxyyzz==16)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -lock 0 ($sel[$i] + "." + $sList[$ii]); }
        }
        else if($xxyyzz==21)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -keyable 0 ($sel[$i] + "." + $tList[$ii]); }
        }
        else if($xxyyzz==22)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -keyable 0 ($sel[$i] + "." + $rList[$ii]); }
        }
        else if($xxyyzz==23)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -keyable 0 ($sel[$i] + "." + $sList[$ii]); }
        }
        else if($xxyyzz==24)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -keyable 1 ($sel[$i] + "." + $tList[$ii]); }
        }
        else if($xxyyzz==25)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -keyable 1 ($sel[$i] + "." + $rList[$ii]); }
        }
        else if($xxyyzz==26)
        {
            for ($ii =0; $ii<size($tList); $ii++)
            { setAttr -keyable 1 ($sel[$i] + "." + $sList[$ii]); }
        }
        else if($xxyyzz==31)
        { setAttr -lock 1 ($sel[$i] + ".visibility"); }
        else if($xxyyzz==32)
        { setAttr -lock 0 ($sel[$i] + ".visibility"); }
        else if($xxyyzz==33)
        { setAttr -keyable 0 ($sel[$i] + ".visibility"); }
        else if($xxyyzz==34)
        { setAttr -keyable 1 ($sel[$i] + ".visibility"); }
        else
        { print "NOT"; }
    }
}

winProc;